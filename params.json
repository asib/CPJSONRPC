{
  "name": "CPJSONRPC",
  "tagline": "A framework for working with JSON-RPC APIs.",
  "body": "[![CI Status](http://img.shields.io/travis/asib/CPJSONRPC.svg?style=flat)](https://travis-ci.org/asib/CPJSONRPC)\r\n[![Version](https://img.shields.io/cocoapods/v/CPJSONRPC.svg?style=flat)](http://cocoapods.org/pods/CPJSONRPC)\r\n[![License](https://img.shields.io/cocoapods/l/CPJSONRPC.svg?style=flat)](http://cocoapods.org/pods/CPJSONRPC)\r\n[![Platform](https://img.shields.io/cocoapods/p/CPJSONRPC.svg?style=flat)](http://cocoapods.org/pods/CPJSONRPC)\r\n\r\n## Example\r\n\r\nTo run the example project, clone the repo, and run\r\n\r\n```bash\r\n$ pod install\r\n```\r\n\r\nfrom the Example directory first.\r\n\r\nYou can also run \r\n\r\n```bash\r\n$ pod try CPJSONRPC\r\n```\r\n\r\nto download the pod to a temp location, install its dependencies and open the demo project.\r\n\r\n## Installation\r\n\r\nCPJSONRPC is available through [CocoaPods](http://cocoapods.org). To install\r\nit, simply add the following line to your Podfile:\r\n\r\n```ruby\r\npod 'CPJSONRPC'\r\n```\r\n\r\nThen, run the following command:\r\n\r\n```bash\r\n$ pod install\r\n```\r\n\r\nYou should now be able to import CPJSONRPC in your project using\r\n\r\n```objective-c\r\n@import CPJSONRPC;\r\n```\r\n\r\nor if you wish to import a specific header, e.g. `CPJSONRPCRequest.h`, use\r\n\r\n```objective-c\r\n#import <CPJSONRPC/CPJSONRPCRequest.h>\r\n```\r\n\r\n## API\r\n\r\n### CPJSONRPCMessage Protocol\r\n\r\n```objective-c\r\n@protocol CPJSONRPCMessage <NSObject>\r\n// All of CPJSONRPCNotification, CPJSONRPCRequest and CPJSONRPCResponse implement\r\n// this protocol.\r\n// CPJSONRPCError doesn't, because it is only ever included as part of a JSON-RPC\r\n// response (and thus a CPJSONRPCError is marshalled during the marshalling of\r\n// the CPJSONRPCResponse that it's attached to).\r\n- (NSString*)createJSONStringAndReturnError:(NSError**)err;\r\n@end\r\n```\r\n\r\n### CPJSONRPCHelper\r\n\r\n```objective-c\r\n@interface CPJSONRPCHelper : NSObject\r\n\r\n// Returns one of the CPJSONRPC classes, depending on what type of message\r\n// is supplied. Callers must check the error before trying to use the returned class.\r\n+ (id<CPJSONRPCMessage>)parseIncoming:(NSString *)incoming error:(NSError *__autoreleasing *)err;\r\n\r\n@end\r\n```\r\n\r\n### CPJSONRPCNotification\r\n\r\n```objective-c\r\n@interface CPJSONRPCNotification : NSObject<CPJSONRPCMessage>\r\n\r\n@property (strong, nonatomic, readonly) NSString *method;\r\n@property (strong, nonatomic, readonly) id params;\r\n\r\n// Use this method to create CPJSONRPCNotification objects. Do no try to create\r\n// with alloc, init. Using this method ensures that all required fields are set.\r\n+ (instancetype)notificationWithMethod:(NSString *)method params:(id)params error:(NSError *__autoreleasing *)err;\r\n\r\n// Get the JSON-RPC string using this method.\r\n- (NSString *)createJSONStringAndReturnError:(NSError *__autoreleasing *)err;\r\n\r\n// This class method is used by CPJSONRPCHelper when parsing a message to\r\n// determine if the message is a notification.\r\n// It returns a dictionary of all the possible fields that could be present in a\r\n// JSON-RPC notification, excluding the \"jsonrpc\" field, which is present in all\r\n// messages (CPJSONRPCHelper checks this field separately). Each field maps to a\r\n// boolean value, which is YES if the field MUST exist, and NO if the field MAY\r\n// be omitted.\r\n+ (NSDictionary *)ValidAndExpectedKeys;\r\n\r\n@end\r\n```\r\n\r\n### CPJSONRPCRequest\r\n\r\n```objective-c\r\n@interface CPJSONRPCRequest : NSObject<CPJSONRPCMessage>\r\n\r\n@property (strong, nonatomic, readonly) NSString *method;\r\n@property (strong, nonatomic, readonly) id params;\r\n@property (strong, nonatomic, readonly) NSNumber *msgId;\r\n\r\n// Use this method to create CPJSONRPCRequest objects. Do no try to create with\r\n// alloc, init. Using this method ensures that all the required fields are set.\r\n+ (instancetype)requestWithMethod:(NSString *)method params:(id)params msgId:(NSNumber *)msgId error:(NSError *__autoreleasing *)err;\r\n\r\n// Get the JSON-RPC string using this method.\r\n- (NSString *)createJSONStringAndReturnError:(NSError *__autoreleasing *)err;\r\n\r\n// This class method is used by CPJSONRPCHelper when parsing a message to\r\n// determine if the message is a request.\r\n// It returns a dictionary of all the possible fields that could be present in a\r\n// JSON-RPC request, excluding the \"jsonrpc\" field, which is present in all messages\r\n// (CPJSONRPCHelper checks this field separately). Each field maps to a boolean\r\n// value, which is YES if the field MUST exist, and NO if the field MAY be omitted.\r\n+ (NSDictionary *)ValidAndExpectedKeys;\r\n\r\n@end\r\n```\r\n\r\n### CPJSONRPCResponse\r\n\r\n```objective-c\r\n@interface CPJSONRPCResponse : NSObject<CPJSONRPCMessage>\r\n\r\n@property (strong, nonatomic, readonly) id result;\r\n@property (strong, nonatomic, readonly) CPJSONRPCError *error;\r\n@property (strong, nonatomic, readonly) NSNumber *msgId;\r\n\r\n// Use these methods to create CPJSONRPCResponse objects. Do not try to create\r\n// using alloc, init. Using these methods ensures we don't violate the JSON-RPC\r\n// protocol by including both \"result\" and \"error\" fields, and that all required\r\n// fields are set.\r\n+ (instancetype)responseWithError:(CPJSONRPCError *)err msgId:(NSNumber *)msgId;\r\n+ (instancetype)responseWithResult:(id)result msgId:(NSNumber *)msgId error:(NSError *__autoreleasing *)err;\r\n\r\n// These methods allow quick identification of whether a CPJSONRPCResponse is\r\n// an error or result response.\r\n- (BOOL)isError;\r\n- (BOOL)isResult;\r\n\r\n// Get the JSON-RPC string using this method.\r\n- (NSString *)createJSONStringAndReturnError:(NSError *__autoreleasing *)err;\r\n\r\n// They return sets of all the fields that should be present in JSON-RPC\r\n// error/result responses, excluding the \"jsonrpc\" field, which is present in\r\n// all messages (CPJSONRPCHelper checks this field separately).\r\n\r\n// These class methods are used by CPJSONRPCHelper when parsing a message to\r\n// determine if the message is a response, and what type of response it is.\r\n// They return dictionaries of all the possible fields that could be present in\r\n// JSON-RPC error/result responses, excluding the \"jsonrpc\" field, which is\r\n// present in all messages (CPJSONRPCHelper checks this field separately). Each\r\n// field maps to a boolean value, which is YES if the field MUST exist, and NO\r\n// if the field MAY be omitted.\r\n+ (NSDictionary *)ValidAndExpectedResultKeys;\r\n+ (NSDictionary *)ValidAndExpectedErrorKeys;\r\n\r\n@end\r\n```\r\n\r\n### CPJSONRPCError\r\n\r\n```objective-c\r\n@interface CPJSONRPCError : NSObject\r\n\r\n@property (strong, nonatomic, readonly) NSNumber *code;\r\n@property (strong, nonatomic, readonly) NSString *message;\r\n@property (strong, nonatomic, readonly) id data;\r\n\r\n// Use this method to create CPJSONRPCError objects. Do not try to create using\r\n// alloc, init. Using this method ensures all the required fields are set.\r\n+ (instancetype)errorWithCode:(NSNumber *)code message:(NSString *)message data:(id)data error:(NSError *__autoreleasing *)err;\r\n\r\n// This class method is used by CPJSONRPCHelper when parsing an error response.\r\n// It returns a dictionary of all the possible fields that could be present in a\r\n// JSON-RPC response error object. Each field maps to a boolean value, which is\r\n// YES if the field MUST exist, and NO if the field MAY be omitted.\r\n+ (NSDictionary *)ValidAndExpectedKeys;\r\n\r\n@end\r\n```\r\n\r\n### CPJSONRPCDefines.h\r\n\r\n```objective-c\r\n// CPJSONRPCParseError's are thrown by CPJSONRPCHelper's parseIncoming:error:\r\n// method.\r\ntypedef NS_ENUM(NSInteger, CPJSONRPCParseError) {\r\n    CPJSONRPCParseErrorInvalidVersion,\r\n    CPJSONRPCParseErrorInvalidMessage,\r\n};\r\n\r\n// CPJSONRPCObjectError's are thrown by the actual classes, generally in the\r\n// methods that create CPJSONRPCMessage-conforming objects.\r\ntypedef NS_ENUM(NSInteger, CPJSONRPCObjectError) {\r\n    CPJSONRPCObjectErrorInvalidNotificationInvalidParamsType,\r\n    CPJSONRPCObjectErrorInvalidNotificationNilMethod,\r\n    CPJSONRPCObjectErrorInvalidRequestInvalidParamsType,\r\n    CPJSONRPCObjectErrorInvalidRequestNilMethod,\r\n    CPJSONRPCObjectErrorInvalidRequestNilId,\r\n    CPJSONRPCObjectErrorInvalidResponse,\r\n    CPJSONRPCObjectErrorInvalidResponseInvalidResultType,\r\n    CPJSONRPCObjectErrorInvalidResponseNilResult,\r\n    CPJSONRPCObjectErrorInvalidResponseNilId,\r\n    CPJSONRPCObjectErrorInvalidErrorInvalidDataType,\r\n    CPJSONRPCObjectErrorInvalidErrorNilCode,\r\n    CPJSONRPCObjectErrorInvalidErrorNilMessage,\r\n};\r\n\r\n// All JSON-RPC messages should contain \"jsonrpc\" : \"2.0\"\r\n#define JSON_RPC_VERSION @\"2.0\"\r\n\r\n// These are all the JSON-RPC fields.\r\n#define JSON_RPC_VERSION_KEY @\"jsonrpc\"\r\n#define JSON_RPC_METHOD_KEY @\"method\"\r\n#define JSON_RPC_PARAMS_KEY @\"params\"\r\n#define JSON_RPC_ID_KEY @\"id\"\r\n#define JSON_RPC_RESULT_KEY @\"result\"\r\n#define JSON_RPC_ERROR_KEY @\"error\"\r\n#define JSON_RPC_ERROR_CODE_KEY @\"code\"\r\n#define JSON_RPC_ERROR_MESSAGE_KEY @\"message\"\r\n#define JSON_RPC_ERROR_DATA_KEY @\"data\"\r\n\r\n// Check the domain of any returned errors using this define.\r\n#define CPJSONRPC_DOMAIN @\"org.cocoapods.CPJSONRPC\"\r\n```\r\n\r\n## Unit Tests\r\n\r\nI've written a number of tests, check `CPJSONRPCSpec.m` in the example project. To run these tests, open up the example project and press `âŒ˜+U`.\r\n\r\n## Author\r\n\r\nJacob Fenton, jacob.d.fenton@gmail.com\r\n\r\n## License\r\n\r\nCPJSONRPC is available under the MIT license. See the LICENSE file for more info.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}